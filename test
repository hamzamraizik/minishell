static int	count_word(  char *s, char c, size_t len)
{
	int		count;
	int		c_fond;
	size_t	i;

	count  = 0;
	c_fond = 0;
	i = 0;
	while (i < len)
	{
		if (s[i] == c)
			c_fond = 0;
		else if (!c_fond && s[i] != c)
		{
			c_fond = 1;
			count++;
		}
		i++;
	}
	return (count);
}

static char	**free_substrs(char **substrs)
{
	int	i;

	i = 0;
	while (substrs[i])
		free(substrs[i++]);
	free(substrs);
	return (0);
}

static int	word_len(  char *s, char c, size_t len)
{
	int		count;
	size_t	i;

	i = 0;
	count = 0;
	while (i < len && s[i] != c)
	{
		count++;
		i++;
	}
	return (count);
}

char	**ft_new_split(  char *s, char c, size_t len)
{
	char	**substrs;
	int		i;
	int		word_length;
	size_t  j;

	if (!s)
		return (NULL);
	i = 0;
	j = 0;
	substrs = (char **)malloc((count_word(s, c, len) + 1) * sizeof(char *));
	if (!substrs)
		return (NULL);
	while (j < len)
	{
		while (j < len && (s[j] == c || s[j] == ' ' || s[j] == '\t'))
			j++;
		if (j < len)
		{
			word_length = word_len(s + j, c, len - j);
			substrs[i] = ft_substr(s + j, 0, word_length);
			if (!substrs[i++])
				return (free_substrs(substrs));
			j += word_length;
		}
	}
	return (substrs[i] = NULL, substrs);
}

char *add_delimetre(char *line)
{
	int		i;
	int		is_quotes;

	i = 0;
	is_quotes = 0;
	while (line[i])
	{
		is_quotes = check_quotes(is_quotes, line[i]);
		if (is_quotes == 0 && line[i] == ' ')
		{
			line[i] = '\0';
			while(line[i + 1] == ' ' || line[i + 1] == '\t')
				i++;
		}
		i++;
	}
	return (line);
}
void	parse_line(char *line, t_list	**head, int length)
{
	char	**new_line;

	*head = NULL;
	new_line = NULL;
	length = ft_strlen(line);
	line = add_delimetre(line);// replace spaces with '\0' for splite
	new_line = ft_new_split(line, '\0', length); // splite line with '\0'
	tokenizing(head, new_line); // listing it into tokenz
	free(new_line); // not freing substers because the same adresses uses in list
	return ;
}

